
# 01. 소프트웨어 생명 주기

* 소프트웨어 생명 주기 (Software Life Cycle)
- 소프트웨어를 개발하기 위한 설계, 운용, 유지보수 등의 과정을 각 '단계별'로 나눈 것
- 소프트웨어 생명 주기는 소프트웨어 개발 단계와 각 단계별 주요 활동, 그리고 활동의 결과에 대한 산출물로 표현

** 대표적인 생명 주기 모형

1) 폭포수 모형 (Waterfall Model)
- 이전 단계로 돌아갈 수 없다는 전제하에 '각 단계를 확실히 매듭짓고' 그 결과를 철저하게 '검토하여 승인 과정을 거친 후 다음 단계를 진행하는 개발 방법론'
- 가장 오래되고 가장 폭넓게 사용된 전통적인 소프트웨어 생명 주기 모형, '고전적 생명 주기 모형' 이라고 한다.
- 모형을 적용한 경험과 성공 사례가 많다, 각 단계가 끝난 후 다음 단계를 수행하기 위한 결과물이 명확하게 산출되어야 함

[ 검토 -> 계획 -> 요구분석 -> 설계 -> 구현 -> 시험(테스트) -> 유지보수 ]

2) 프로토타입 모형 (Prototype Model, 원형 모형)
- 사용자의 요구사항을 파악하기 위해 '실제 개발될 소프트웨어' 에 대한 '견본품(Protorype)을 만들어 최종 결과물을 예측하는 모형'
- 견본품은 '사용자와 시스템 사이'의 인터페이스에 중점을 두어 개발한다.

[ 요구 수집 -> 설계 -> 구축 -> 평가 -> 조정 -> 구현 -> 요구수집 ]

3) 나선형 모형 (Spiral Model, 점진적 모형)
- 나선을 따라 돌듯이 '여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로' 완벽한 최종 소프트웨어를 개발하는 모형, 보헴이 제안
- 폭포수 모형과 프로토 타입 모형의 장점에 '위험 분석 기능'을 추가한 모형
- 누락되거나 추가된 요구사항을 첨가할 수 있음, 유지보수 과정이 필요 X, '계획' 하고 '분석' 한 후 '개발' 하고 '평가' 한다.

[ 계획 수립 -> 위험 분석 -> 개발 및 검증 -> 고객 평가 ]

4) 애자일 모형 (Agile Model)
- 애자일은 민첩한, 기민한 이라는 의미로, 고객의 '요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발하는 모형'
- 좋은 것을 빠르고 낭비 없게 만들기 위해 '고객과의 소통'에 초점을 맞춘 방법론을 통칭
- 폭포수 모형과 대조적, 기업 활동 전반에 걸쳐 사용

** 대표적인 개발 모형
- 스크럼 (Scrum)
- XP (eXtreme Programming)
- 칸반 (Kanban)
- Lean
- 기능 중심 개발 (FDD : Feature Driven Development)

** 애자일 개발 4가지 핵심 가치
1) 프로세스와 도구보다는 '개인과 상호작용'에 더 가치를 둠
2) 방대한 문서보다는 '실행되는 SW'에 더 가치를 둠
3) 계약 협상보다는 '고객과 협업'에 더 가치를 둠
4) 계획을 따르기 보다는 '변화에 반응하는 것'에 더 가치를 둠

* 소프트웨어 공학
- 소프트웨어 공학(SE : Software Engineering)은 '소프트웨어의 위기를 극복하기 위한 방안으로 연구된 학문'
- 여러 가지 방법론과 도구, 관리 기법들을 통하여 소프트웨어의 품질과 생산성 향상을 목적으로 함

** 소프트웨어 공학의 기본 원칙
- '현대적인 프로그래밍 기술'을 계속적으로 적용해야 함
- 개발된 소프트웨어의 '품질이 유지되도록 지속적으로 검증'해야 함
- 소프트웨어 개발 관련 사항 및 결과에 대한 '명확한 기록'을 유지해야 함


# 02. 스크럼 (Scrum) 기법

* 스크럼 (Scrum)
- '팀'이 중심이 되어 개발의 효율성을 높이는 기법, 팀원 스스로가 스크럼 팀을 구성하고, 개발 작업에 관한 모든 것을 스스로 해결할 수 있어야 함

** 스크럼 팀
1) 제품 책임자 (PO : Product Owner) - 요구사항이 담긴 '백로그(Backlog)'를 작성하는 주체
			          - 이해관계자들 중 개발될 제품에 대한 이해도가 높고, 요구사항을 책임지고 의사를 결정할 사람으로 선정

2) 스크럼 마스터 (SM : Scrum Master) - 스크럼 팀이 스크럼을 잘 수행할 수 있도록 가이드 역할을 수행
				- 일일 스크럼 회의 주관하여 진행 사항을 점검하고, 개발 과정에서 발생된 장애 요소를 공론화해서 처리

3) 개발 팀 (DT : Development Team) - 제품 책임자와 스크럼 마스터를 제외한 모든 팀원으로 제품 개발을 수행함

*** 백로그(Backlog) : 제품 개발에 필요한 요구사항을 모두 모아 우선순위를 부여해 놓은 목록
*** 이해관계자 (Stakeholder) : 소프트웨어 개발과 관련해서 이해관계자는 소프트웨어 개발 의뢰자, 소프트웨어 개발자, 소프트웨어 사용자 등이다.

** 스크럼 개발 프로세스
1) 스프린트 계획 회의 (Sprint Planning Meeting) : 제품 백로그 중 이번 스프린트에서 수행할 작업을 대상으로 단기 일정을 수립하는 회의
2) 스프린트 (Sprint) : 실제 개발 작업을 진행하는 과정으로, 보통 2~4주 정도의 기간 내에서 진행함
3) 일일 스크럼 회의 (Daily Scrum Meeting) : 모든 팀원이 매일 약속된 시간에 약 15분 동안 진행 상황을 점검하는 회의, 남은 작업 시간은 소멸 차트(Burn-down Chart)에 표시
4) 스프린트 검토 회의 (Sprint Review) : 부분 또는 전체 완성 제품이 요구사항에 잘 부합하는지 테스팅하는 회의
5) 스프린트 회고 (Sprint Retospective) : 정해놓은 규칙 준수 여부 및 개선할 점을 확인하고 기록하는 것

*** 제품 백로그 (Product Backlog) : 제품 개발에 필요한 모든 요구사항(User Story)을 우선순위에 따라 나열한 목록, 개발 과정에서 새롭게 도출 되는 요구사항으로 인해 계속 업데이트
			        제품 백로그에 작성된 사용자 스토리는 전체 일정 계획인 릴리즈 계획(Release Plan)을 수립할 때 사용

*** 소멸 차트 (Burn-down Char) : 해당 스프린트에서 작업의 진행 상황을 확인할 수 있도록 시간의 경과에 따라 남은 작업 시간을 그래프로 표현한 것
			      초기에 추정했던 전체 작업 시간은 작업이 진행될 수록 점점 줄어(Burn-down) 들게 됨

**** 스크럼 개발을 진행할 때는 '계획' 하여 '진행(스프린트)' 한 후 '회의' 와 '검토' 를 거쳐 '회고' 한다.


# 03. XP (eXtreme Programming) 기법

* XP(eXtreme Programming)
- 수시로 발생하는 고객의 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화하여 개발 생산성을 높이는 방법
- 짧고 반복적인 개발 주기, 단순한 설계, 고객의 적극적인 참여를 통해 소프트웨어를 빠르게 개발하는 것을 목적으로 함
- 릴리즈의 기간을 짧게 반복하면서 고객의 요구사항 반영에 대한 가시성을 높임

** XP의 5대 핵심가치 - 의사소통(Communication), 단순성(Simplicity), 용기(Courage), 존중(Respect), 피드백(Feedback)

** XP 개발 프로세스
1) 릴리즈 계획 수립(Release Planning) - 부분 혹은 전체 개발 완료 시점에 대한 일정을 수립
			           - 몇 개의 스토리가 적용되어 부분적으로 기능이 완료된 제품을 제공하는 것을 '릴리즈' 라고 함

2) 이터레이션(Iteration, 주기) - 실제 개발 작업을 진행하는 과정으로 보통 1~3주 정도의 기간으로 진행

3) 승인 검사 (Acceptance Test, 인수 테스트) - 하나의 이터레이션 안에서 부분 완료 제품이 구현되면 수행하는 테스트

4) 소규모 릴리즈 (Small Release) - 요구사항에 유연하게 대응할 수 있도록 릴리즈의 규모를 축소한 것

=> '계획' 하고 '진행(이터레이션)' 한 후 '검사' 하고 '출시(릴리즈)' 한다.

*** XP의 주요 실천 방법(Practice)
- 짝 프로그래밍 (Pair Programming) : 다른 사람과 함께 프로그래밍을 수행함으로써 개발에 대한 책임을 공동으로 나눠 갖는 환경을 조성함
- 공동 코드 소유 (Collective Ownership) : 개발 코드에 대한 권한과 책임을 공동으로 소유
- 테스트 주도 개발 (Test-Driven Development) : 개발자가 실제 코드를 작성하기 전 테스트 케이스를 먼저 작성하므로 자신이 무엇을 해야할지 정확히 파악
					테스트가 지속적으로 진행될 수 있도록 자동화된 테스팅 도구(구조, 프레임워크) 를 사용함
- 전체 팀 (Whole Team) : 개발에 참여하는 모든 구성원(고객 포함) 들은 자신의 역할이 있고 그 역할에 대한 책임을 가져야 함
- 계속적인 통합 (Continuous Integration) : 모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리될 때 마다 지속적으로 통합됨
- 리펙토링 (Refactoring) : 프로그램 기능의 변경 없이 시스템을 재구성함 => 프로그램을 쉽게 이해하고 쉽게 수정하여 빠르게 개발할 수 있도록 하기 위해서..
- 소규모 릴리즈 (Small Release) : 릴리즈 기간을 짧게 반복함으로써 고객의 요구 변화에 신속히 대응 가능


# 04. 현행 시스템 파악

* 현행 시스템 파악 절차
1) 1단계
- 시스템 구성 파악 : 조직의 주요 업무를 담당하는 '기간 업무' 와 이를 지원하는 '지원 업무' 로 구분하여 기술함
- 시스템 기능 파악 : 현재 제공하는 기능들을 '주요 기능'과 '하부 기능', '세부 기능' 으로 구분하여 '계층형'으로 표시
- 시스템 인터페이스 파악 : 단위 업무 시스템 간 주고받는 데이터의 '종류', '형식', '프로토콜', '연계 유형', '주기' 등을 명시

2) 2단계
- 아키텍처 구성 파악 : 최상위 수준에서 계층별로 표현한 '아키텍처 구성도' 를 작성
- 소프트웨어 구성 파악 : 소프트웨어들의 제품명, 용도, '라이선스 적용 방식', '라이선스 수' 등을 명시

3) 3단계
- 하드웨어 구성 파악 : 단위 업무 시스템들이 운용되는 서버의 주요 '사양' 과 '수량', 그리고 '서버의 이중화 적용 여부' 를 명시
- 네트워크 구성 파악 : 서버의 위치, 서버 간의 네트워크 연결 방식을 '네트워크 구성도' 로 작성

=> 시스템 구성/기능/인터페이스 파악 => 아키텍처 및 소프트웨어 구성 파악 => 하드웨어 및 네트워크 구성 파악

** 라이선스 (License)
- 상용 소프트웨어의 경우 라이선스 적용 방식의 기준과 보유한 라이선스의 파악이 중요

** 서버의 이중화 (Replication)
- 운용 서버에 장애가 발생했을 때 대기 서버에서 서비스를 계속 유지할 수 있도록, 운용 서버의 자료 변경이 대기 서버에도 동일하게 복제 되도록 관리하는 것


# 05. 개발 기술 환경 파악

* 개발 기술 환경 파악의 개요
- 개발하고자 하는 소프트웨어와 관련된 '운영체제(OS)', '데이터베이스 관리 시스템(DBMS)', '미들웨어' 등을 선정할 때 고려해야 할 사항을 기술하고, '오픈 소스' 를 사용할 때 주의해야 할 내용을 제시

1) 운영체제 (OS, Operating System)
- 운영체제는 '컴퓨터 시스템의 자원을 효율적으로 관리', 사용자가 '컴퓨터를 편리하고 효율적으로 사용할 수 있도록 환경을 제공하는 소프트웨어'
- 컴퓨터 사용자와 컴퓨터 하드웨어 간의 인터페이스로서 동작하는 시스템 소프트웨어의 일종
- 다른 응용 프로그램이 유용한 작업을 할 수 있도록 환경을 제공

** 운영체제 관련 요구사항 식별 시 고려사항 : 가용성, 성능, 기술지원, 주변기기, 구축비용

2) 데이터베이스 관리 시스템 (DBMS, DataBase Management System)
- 사용자와 데이터베이스 사이에서 사용자의 요구에 따라 '정보를 생성' 해주고, '데이터베이스를 관리해주는 소프트웨어'
- 기존의 파일 시스템이 갖는 데이터의 종속성과 중복성의 문제를 해결하기 위해 제안된 시스템
- 모든 응용 프로그램들이 데이터베이스를 공용할 수 있도록 관리

** DBMS 관련 요구사항 식별 시 고려사항 : 가용성, 성능, 기술지원, 상호 호환성, 구축비용

3) 웹 애플리케이션 서버 (WAS, Web Application Server)
- 사용자의 요구에 따라 변하는 '동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어'
- 데이터 접근, 세션 관리, 트랜잭션 관리 등을 위한 라이브러리를 제공
- 주로 데이터베이스 서버와 연동해서 사용

** 웹 애플리케이션 서버 관련 요구사항 식별 시 고려사항 : 가용성, 성능, 기술지원, 구축비용

*** 미들웨어 : 운영체제와 해당 운영체제에 의해 실행되는 응용 프로그램 사이에서 운영체제가 제공하는 서비스 이외에 추가적인 서비스를 제공하는 소프트웨어

4) 오픈 소스
- 누구나 별다른 '제한 없이 사용할 수 있도록 소스 코드를 공개한 소프트웨어', 오픈소스 라이선스를 만족함

** 오픈 소스 관련 요구사항 식별 시 고려사항 : 라이선스의 종류, 사용자 수, 기술의 지속 가능성 


# 06. 요구사항 정의

* 요구사항
- '소프트웨어가 어떤 문제를 해결하기 위해 제공하는 서비스에 대한 설명' 과 정상적으로 '운영되는데 필요한 제약 조건'
- 소프트웨어 개발이나 유지 보수 과정에서 필요한 기준과 근거를 제공
- 개발에 참여하는 이해관계자들 간의 의사소통을 원할하게 하는 데 도움을 줌

** 요구사항의 유형
1) 기능 요구사항 (Functional Requirements)
- 시스템이 무엇을 하는지, 어떤 기능을 하는지 등의 '기능이나 수행과 관련된 요구사항'
- 시스템의 입력이나 출력으로 무엇이 포함되어야 하는지에 대한 사항
- 시스템이 어떤 데이터를 저장하거나 연산을 수행해야 하는지에 대한 사항
- 시스템이 반드시 수행해야 하는 기능
- 사용자가 시스템을 통해 제공받기를 원하는 기능

2) 비기능 요구사항 (Non-Functional Requirements)
- '품질이나 제약사항과 관련된 요구사항'
- 시스템 장비 구성, 성능, 인터페이스, 데이터를 구축하기 위해 필요한, 테스트, 보안 요구사항
- 품질 요구사항 (가용성, 정합성, 상호 호환성, 대응성, 이식성, 확장성, 보안성)
- 제약사항
- 프로젝트 관리, 프로젝트 자원 요구사항

*** 기능 요구사항과 비기능 요구사항의 예
- 기능 요구사항 : 사용자는 회원ID와 비밀번호를 입력하여 로그인할 수 있다. (기능)
- 비기능 요구사항 : 시스템은 1년365일, 하루 24시간 운용이 가능해야 한다. (품질or 제약사항)

3) 사용자 요구사항 (User Requirements)
- '사용자 관점' 에서 '본 시스템이 제공해야' 할 요구사항
- 사용자를 위한 것으로, 친숙한 표현으로 이해하기 쉽게 작성

4) 시스템 요구사항 (System Requirements)
- '개발자 관점' 에서 '본 시스템 전체가 사용자와 다른 시스템에 제공해야' 할 요구사항
- 사용자 요구사항에 비해 전문적이고 기술적인 용어로 표현
- '소프트웨어 요구사항' 이라고도 함


# 07. 요구사항 개발 프로세스

* 요구사항 개발 프로세스
- 개발 대상에 대한 '요구사항' 을 체계적으로 '도출' 하고 '분석' 한 후 '명세서' 에 정리한 다음 '확인 및 검증' 하는 일련의 구조화된 활동
- 요구사항 개발 프로세스가 진행되기 전 타당성 조사(Feasibility Strudy) 가 선행되어야 함
- 요구사항 개발은 '요구공학(Requirement Engineering)의 한 요소

=> [ 도출(Elicitation) -> 분석(Analysis) -> 명세(Specification) -> 확인(Validation) ]

1) 요구사항 도출 (Requirement Elicatation, 요구사항 수집)
- 시스템, 사용자, 개발자 등 '시스템 개발에 관련된 사람들이 서로 의견을 교환하여 요구사항' 을 어떻게 수집할 것인지를 '식별하고 이해하는 과정'
- 개발자와 고객 사이의 관계가 만들어지고 '이해관계자(Stakeholder)' 가 식별됨
- '소프트웨어 개발 생명 주기(SDLC)' 동안 지속적으로 반복

** 요구사항을 도출하는 주요 기법
- 청취와 인터뷰, 설문
- 브레인스토밍 (Brain Storming) : 3인 이상이 자유롭게 의견을 교환하면서 독창적인 아이디어를 도출해 내는 방법
- 워크샵
- 프로토타이핑 (Prototyping) : 프로토타입(견본품)을 통해 효과적으로 요구 분석을 수행하면서 명세서를 산출하는 작업, 가장 단순한 형태, 설명을 위해 종이에 대략적인 순서나 형태를 그려 보여주는 것
- 유스케이스 (Use Case) : 사용자의 요구사항을 기능 단위로 표현

2) 요구사항 분석 (Requirement Analysis)
- 개발 대상에 대한 사용자의 '요구사항 중' 명확하지 않거나 모호하여 '이해되지 않는 부분' 을 발견하고 이를 '걸러내기 위한 과정'
- 요구사항의 타당성을 조사하고 비용과 일정에 대한 제약을 설정
- 서로 상충되는 요구사항이 있으면 이를 중재하는 과정

** 요구사항 분석에 사용되는 대표적 도구
- 자료 흐름도(DFD), 자료 사전(DD)

3) 요구사항 명세 (Requirement Specification)
- '분석된 요구사항을 바탕으로 모델을 작성하고 문서화하는 것'
- 기능 요구사항은 빠짐없이 기술, 비기능 요구사항은 필요한 것만 기술
- 구체적인 명세를 위해 '소단위 명세서(Mini-spec)' 가 사용될 수 있음

4) 요구사항 확인 (Requirement Validation, 요구사항 검증)
- 개발 자원을 요구사항에 할당하기 전 '요구사항 명세서가 정확하고 완전하게 작성되었는지를 검토' 하는 활동
- 이해관계자들이 검토해야 함
- 요구사항 관리 도구를 이용하여 요구사항 정의 문서들에 대해 '형상 관리(SCM)' 를 수행

** 형상 관리 (SCM)
- 소프트웨어 개발 단계의 각 과정에서 만들어지는 프로그램, 프로그램을 설명하는 문서, 데이터 등을 통칭하여 '형상' 이라고 함
- 소프트웨어의 개발 과정에서 만들어지는 형상들의 변경 사항을 관리하는 일련의 활동을 말함

* 요구공학 (Requirement Engineering)
- 무엇을 개발해야 하는지 '요구사항을 정의하고, 분석 및 관리하는 프로세스를 연구하는 학문'
- 요구사항 변경의 원인과 처리 방법을 이해하고 요구사항 관리 프로세스의 품질을 개선하여 소프트웨어 프로젝트 실패를 최소화하는 것을 목표로 함

* 요구사항 명세 기법
1) 정형 명세 기법
- 기법 : 수학적 원리 기반, 모델 기반
- 작성 방법 : 수학적 기호, 정형화된 표기법
- 특징 : 요구사항을 정확하고 간결하게 표현, 요구사항에 대한 결과가 작성자에 관계없이 일관성이 있어 완전성 검증이 가능, 표기법이 어려워 사용자가 이해하기 어려움
- 종류 : VDM, Z, Petri-net, CSP 등

2) 비정형 명세 기법
- 기법 : 상태/기능/객체 중심
- 작성 방법 : 일반 명사, 동사 등 자연어를 기반으로 서술 또는 다이어그램으로 작성
- 특징 : 자연어의 사용으로 인해 요구사항에 대한 결과가 작성자에 따라 다를 수 있어 일관성 떨어지고, 해석이 달라질 수 있음, 내용의 이해가 쉬워 의사소통 용이
- 종류 : FSM, Decision Table, ER모델링, State Chart(SADT) 등


# 08. 요구사항 분석

* 요구사항 분석 (Requirement Analysis)
- 소프트웨어 개발의 실제적인 첫 단계로, '개발 대상에 대한 사용자의 요구사항을 이해하고 문서화(명세화) 하는 활동'
- 사용자 요구의 타당성을 조사하고 비용과 일정에 대한 제약을 설정, 사용자의 요구를 정확하게 추출하여 목표를 정함

* 구조적 분석 기법
- '자료의 흐름'과 '처리'를 중심으로 하는 요구사항 분석 방법
- '도형 중심' 의 분석용 도구와 분석 절차를 이용하여 사용자의 요구사항을 파악하고 문서화함
- '하향식 방법' 을 사용하여 시스템을 세분화 할 수 있음
- 분석의 중복을 배체할 수 있음

** 주요 구조적 분석 기법 도구
- 자료 흐름도(DFD), 자료 사전(DD), 소단위 명세서(Mini-Spec), 개체 관계도(ERD), 상태 전이도(STD), 제어 명세서

* 자료 흐름도 (DFD, Data Flow Diagram)
- 요구사항 분석에서 '자료의 흐름 및 변환 과정과 기능을 도형 중심으로 기술하는 방법'
- '자료 흐름 그래프', '버블 차트' 라고도 함
- 자료 흐름과 처리를 중심으로 하는 구조적 분석 기법에 이용됨

* 자료 흐름도 기본 기호
1) 프로세스 (Process) : 자료를 변환시키는 시스템의 한 부분(처리과정) 을 나타내며, '처리', '기능', '변환', '버블' 이라고도 함
2) 자료 흐름 (Data Flow) : 자료의 이동(흐름) 이나 '연관관계'를 나타냄
3) 자료 저장소 (Data Store) : 시스템에서의 '자료 저장소' (파일, 데이테베이스)를 나타냄
4) 단말 (Terminator) : 시스템과 교신하는 외부 개체로, 입력 데이터가 만들어지고 출력 데이터를 받음

* 자료 사전 (DD, Data Dictionary)
- '자료 흐름도에 있는 자료' 를 더 자세히 '정의하고 기록한 것'
- 데이터를 설명하는 데이터로, '데이터의 데이터' 또는 '메타 데이터(Meta Data)' 라고도 함

** 자료 사전에서 사용되는 표기 기호
1) = : 자료의 정의 - ~로 구성되어 있다. (is composed of)
2) + : 자료의 연결 - 그리고 (and)
3) () : 자료의 생략 - 생략 가능한 자료 (Optional)
4) [] : 자료의 선택 - 또는 (or)
5) {} : 자료의 반복 - Iteration of
6) ** : 자료의 설명 - 주석 (Comment)


# 09. 요구사항 분석 CASE와 HIPO

* 요구사항 분석용 CASE (자동화 도구)
- 요구사항을 자동으로 분석하고, 요구사항 분석 명세서를 기술하도록 개발된 도구

** 대표적인 요구사항 분석용 CASE
1) SADT
- 시스템 정의, 소프트웨어 요구사항 분석, 시스템/소프트웨어 설계를 위한 도구
- SoftTech 사에서 개발, 구조적 요구 분석을 하기 위해 '블록 다이어그램' 을 채택한 자동화 도구

2) SREM = RSL/REVS
- TRW 사가 실시간 처리 소프트웨어 시스템에서 요구사항을 명확히 기술하도록 할 목적으로 개발한 도구
  * RSL 과 REVS를 사용하는 자동화 도구
    - RSL : 요소, 속성, 관계, 구조들을 기술하는 요구사항 기술 언어
    - REVS : RSL로 기술된 요구사항들을 자동으로 분석하여 요구사항 명세서를 출력하는 요구사항 분석기

3) PSL/PSA
    * PSL과 PSA를 사용하는 자동화 도구
      - PSL : 문제(요구사항) 기술 언어
      - PSA : PSL로 기술한 요구사항을 분석하여 보고서를 출력하는 문제 분석기
   => 미시간 대학에서 개발

4) TAGS
- 시스템 공학 방법 응용에 대한 자동 접근 방법
- 개발 주기의 전 과정에 이용할 수 있는 통합 자동화 도구
   
* HIPO (Hierarchy Input Process Output)
- 시스템의 분석 및 설계, 또는 문서화에 사용되는 기법으로, '시스템 실행 과정인 입력, 처리, 출력 기능을 표현한 것'
- '하향식 소프트웨어 개발' 을 위한 문서화 도구
- 기능과 자료의 의존 관계를 동시에 표현할 수 있음
- 기호, 도표 등을 사용하므로 보기 쉽고 이해하기도 쉬움

** HIPO Chart : 시스템의 기능을 여러 개의 '고유 모듈' 로 분할하여 이들 간의 인터페이스를 계층 구조로 표현한 것

*** HIPO 종류
1) 가시적 도표 (Visual Table of Contents, 도식 목차)
2) 총체적 도표 (Overview Diagram, 총괄 도표, 개요 도표)
3) 세부적 도표 (Detail Diagram, 상세 도표)


# 10. UML 개요


# 11. UML - 관계 (Relationship)

# 12. UML - 다이어그램

# 13. 유스케이스 (Use Case) 다이어그램


# 14. 활동 (Activity) 다이어그램

# 15. 클래스 (Class) 다이어그램


# 16. 시퀀스 (Sequence) 다이어그램


# 17. 커뮤니케이션 (Communication) 다이어그램


# 18. 상태 (State) 다이어그램


# 19. 패키지 (Package) 다이어그램


# 20. 소프트웨어 개발 방법론

# 21. S/W 공학의 발전적 추세


# 22. 비용 산정 기법

































