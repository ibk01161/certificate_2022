
# 01. 소프트웨어 생명 주기

* 소프트웨어 생명 주기 (Software Life Cycle)
- 소프트웨어를 개발하기 위한 설계, 운용, 유지보수 등의 과정을 각 '단계별'로 나눈 것
- 소프트웨어 생명 주기는 소프트웨어 개발 단계와 각 단계별 주요 활동, 그리고 활동의 결과에 대한 산출물로 표현

** 대표적인 생명 주기 모형

1) 폭포수 타입 (Waterfall Model)
- 이전 단계로 돌아갈 수 없다는 전제하에 '각 단계를 확실히 매듭짓고' 그 결과를 철저하게 '검토하여 승인 과정을 거친 후 다음 단계를 진행하는 개발 방법론'
- 가장 오래되고 가장 폭넓게 사용된 전통적인 소프트웨어 생명 주기 모형, '고전적 생명 주기 모형' 이라고 한다.
- 모형을 적용한 경험과 성공 사례가 많다, 각 단계가 끝난 후 다음 단계를 수행하기 위한 결과물이 명확하게 산출되어야 함

[ 검토 -> 계획 -> 요구분석 -> 설계 -> 구현 -> 시험(테스트) -> 유지보수 ]

2) 프로토타입 모형 (Prototype Model, 원형 모형)
- 사용자의 요구사항을 파악하기 위해 '실제 개발될 소프트웨어' 에 대한 '견본품(Protorype)을 만들어 최종 결과물을 예측하는 모형'
- 견본품은 '사용자와 시스템 사이'의 인터페이스에 중점을 두어 개발한다.

[ 요구 수집 -> 설계 -> 구축 -> 평가 -> 조정 -> 구현 -> 요구수집 ]

3) 나선형 모형 (Spiral Model, 점진적 모형)
- 나선을 따라 돌듯이 '여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로' 완벽한 최종 소프트웨어를 개발하는 모형, 보헴이 제안
- 폭포수 모형과 프로토 타입 모형의 장점에 '위험 분석 기능'을 추가한 모형
- 누락되거나 추가된 요구사항을 첨가할 수 있음, 유지보수 과정이 필요 X, '계획' 하고 '분석' 한 후 '개발' 하고 '평가' 한다.

[ 계획 수립 -> 위험 분석 -> 개발 및 검증 -> 고객 평가 ]

4) 애자일 모형 (Agile Model)
- 애자일은 민첩한, 기민한 이라는 의미로, 고객의 '요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발하는 모형'
- 좋은 것을 빠르고 낭비 없게 만들기 위해 '고객과의 소통'에 초점을 맞춘 방법론을 통칭
- 폭포수 모형과 대조적, 기업 활동 전반에 걸쳐 사용

** 대표적인 개발 모형
- 스크럼 (Scrum)
- XP (eXtreme Programming)
- 칸반 (Kanban)
- Lean
- 기능 중심 개발 (FDD : Feature Driven Development)

** 애자일 개발 4가지 핵심 가치
1) 프로세스와 도구보다는 '개인과 상호작용'에 더 가치를 둠
2) 방대한 문서보다는 '실행되는 SW'에 더 가치를 둠
3) 계약 협상보다는 '고객과 협업'에 더 가치를 둠
4) 계획을 따르기 보다는 '변화에 반응하는 것'에 더 가치를 둠

* 소프트웨어 공학
- 소프트웨어 공학(SE : Software Engineering)은 '소프트웨어의 위기를 극복하기 위한 방안으로 연구된 학문'
- 여러 가지 방법론과 도구, 관리 기법들을 통하여 소프트웨어의 품질과 생산성 향상을 목적으로 함

** 소프트웨어 공학의 기본 원칙
- '현대적인 프로그래밍 기술'을 계속적으로 적용해야 함
- 개발된 소프트웨어의 '품질이 유지되도록 지속적으로 검증'해야 함
- 소프트웨어 개발 관련 사항 및 결과에 대한 '명확한 기록'을 유지해야 함


# 02. 스크럼 (Scrum) 기법

* 스크럼 (Scrum)
- '팀'이 중심이 되어 개발의 효율성을 높이는 기법, 팀원 스스로가 스크럼 팀을 구성하고, 개발 작업에 관한 모든 것을 스스로 해결할 수 있어야 함

** 스크럼 팀
1) 제품 책임자 (PO : Product Owner) - 요구사항이 담긴 '백로그(Backlog)'를 작성하는 주체
			          - 이해관계자들 중 개발될 제품에 대한 이해도가 높고, 요구사항을 책임지고 의사를 결정할 사람으로 선정

2) 스크럼 마스터 (SM : Scrum Master) - 스크럼 팀이 스크럼을 잘 수행할 수 있도록 가이드 역할을 수행
				- 일일 스크럼 회의 주관하여 진행 사항을 점검하고, 개발 과정에서 발생된 장애 요소를 공론화해서 처리

3) 개발 팀 (DT : Development Team) - 제품 책임자와 스크럼 마스터를 제외한 모든 팀원으로 제품 개발을 수행함

*** 백로그(Backlog) : 제품 개발에 필요한 요구사항을 모두 모아 우선순위를 부여해 놓은 목록
*** 이해관계자 (Stakeholder) : 소프트웨어 개발과 관련해서 이해관계자는 소프트웨어 개발 의뢰자, 소프트웨어 개발자, 소프트웨어 사용자 등이다.

** 스크럼 개발 프로세스
1) 스프린트 계획 회의 (Sprint Planning Meeting) : 제품 백로그 중 이번 스프린트에서 수행할 작업을 대상으로 단기 일정을 수립하는 회의
2) 스프린트 (Sprint) : 실제 개발 작업을 진행하는 과정으로, 보통 2~4주 정도의 기간 내에서 진행함
3) 일일 스크럼 회의 (Daily Scrum Meeting) : 모든 팀원이 매일 약속된 시간에 약 15분 동안 진행 상황을 점검하는 회의, 남은 작업 시간은 소멸 차트(Burn-down Chart)에 표시
4) 스프린트 검토 회의 (Sprint Review) : 부분 또는 전체 완성 제품이 요구사항에 잘 부합하는지 테스팅하는 회의
5) 스프린트 회고 (Sprint Retospective) : 정해놓은 규칙 준수 여부 및 개선할 점을 확인하고 기록하는 것

*** 제품 백로그 (Product Backlog) : 제품 개발에 필요한 모든 요구사항(User Story)을 우선순위에 따라 나열한 목록, 개발 과정에서 새롭게 도출 되는 요구사항으로 인해 계속 업데이트
			        제품 백로그에 작성된 사용자 스토리는 전체 일정 계획인 릴리즈 계획(Release Plan)을 수립할 때 사용

*** 소멸 차트 (Burn-down Char) : 해당 스프린트에서 작업의 진행 상황을 확인할 수 있도록 시간의 경과에 따라 남은 작업 시간을 그래프로 표현한 것
			      초기에 추정했던 전체 작업 시간은 작업이 진행될 수록 점점 줄어(Burn-down) 들게 됨

**** 스크럼 개발을 진행할 때는 '계획' 하여 '진행(스프린트)' 한 후 '회의' 와 '검토' 를 거쳐 '회고' 한다.







# 03. XP(eXtreme Programming) 기법

# 04. 현행 시스템 파악


# 05. 개발 기술 환경 파악

# 06. 요구사항 정의

# 07. 요구사항 개발 프로세스


# 08. 요구사항 분석

# 09. 요구사항 분석 CASE와 HIPO

# 10. UML 개요


# 11. UML - 관계 (Relationship)

# 12. UML - 다이어그램

# 13. 유스케이스 (Use Case) 다이어그램


# 14. 활동 (Activity) 다이어그램

# 15. 클래스 (Class) 다이어그램


# 16. 시퀀스 (Sequence) 다이어그램


# 17. 커뮤니케이션 (Communication) 다이어그램


# 18. 상태 (State) 다이어그램


# 19. 패키지 (Package) 다이어그램


# 20. 소프트웨어 개발 방법론

# 21. S/W 공학의 발전적 추세


# 22. 비용 산정 기법

































