
# 01. 시스템 인터페이스 요구사항 분석

* 시스템 인터페이스 요구사항
- 개발할 시스템과 외부 시스템을 연동하는데 필요한 시스템 인터페이스에 대한 요구사항을 기술한 것

** 시스템 인터페이스 : 독립적으로 떨어져 이는 시스템들끼리 서로연동하여 상호 작용을 하기 위한 접속 방법이나 규칙

*** 시스템 인터페이스 요구사항 명세서의 구성 요소
- 인터페이스 이름, 연계 대상 시스템, 연계 범위 및 내용, 연계 방식, 송신 데이터, 인터페이스 주기, 기타 고려사항

* 시스템 인터페이스 요구사항 분석
- 요구사항을 분류하고 구체적으로 명세한 후, 이를 이해관계자들에게 전달하는 일련의 과정
- 소프트웨어 요구사항 분석 기법을 적절히 이용
- 요구사항의 분해가 필요한 경우, 적절한 수준으로 세분화함
- 요구사항 분석 시 누락된 요구사항이나 제한 조건을 추가함
- 요구사항에 대한 상대적 중요도를 평가하여 우선수위를 부여함

* 시스템 인터페이스 요구사항 분석 절차
1) 시스템 인터페이스 관련 요구사항을 선별하여 별도로 '요구사항 목록'을 만듦
2) 요구사항과 관련된 자료를 준비
3) '기능적인 요구사항' 과 '비기능적인 요구사항' 으로 분류
4) 요구사항을 분석하고, 요구사항 명세서에 내용을 추가하거나 수정함
5) 추가, 수정한 '요구사항 명세서'와 '요구사항 목록'을 관련 이해관계자에게 전달함


# 02. 인터페이스 요구사항 검증

* 인터페이스 요구사항 검증
- 사용자들의 요구사항이 요구사항 명세서에 정확하고 완전하게 기술되었는지 검토하고 개발 범위의 기준인 '베이스라인' 을 설정하는 것

** 인터페이스 요구사항 검증 수행 순서
1) 요구사항 검토 계획 수립 : 검토 기준 및 방법, 참여자, 체크리스트, 관련 자료, 일정 등의 검토 계획 수립
2) 검토 및 오류 수정 : 인터페이스 요구사항 명세서 검토 및 오류 목록과 시정 조치서 작성
3) 베이스라인 설정 : 검증된 인터페이스 요구사항을 승인 받은 후, 요구사항 명세서의 베이스라인 설정

* 요구사항 검증 방법
1) 요구사항 검토 (Requirements Review) : 요구사항 명세서의 오류 확인 및 표준 준수 여부 등의 결함 여부를 검토 담당자들이 수작업으로 분석하는 방법
   - 동료 검토 (Peer Review) : 요구사항 명세서 작성자가 명세서 내용을 직접 설명하고 동료들이 이를 들으면서결함을 발견하는 형태의 검토 방법
   - 워크스루 (Work Through) : 검토 회의 전에 요구사항 명세서를 미리 배포하여 사전 검토 후 짧은 검토 회의를 통해 결함을 발견하는 형태의 검토 방법
   - 인스펙션 (Inspection) : 요구사항 명세서 작성자를 제외한 다른 검토 전뭄ㄴ가들이 요구사항 명세서를 확인하면서 결함을 발견하는 형태의 검토 방법

2) 프로토타이핑 (prototyping) : 사용자의 요구사항을 정확히 파악하기 위해 실제 개발될 소프트웨어에 대한 '견본품(Prototype)' 을 만들어 최종 결과물을 예측
3) 테스트 설계 : 요구사항은 테스트할 수 있도록 작성되어야 하며, 이를 위해 '테스트 케이스' 를 생성하여 요구사항이 현실적으로 테스트 가능한지를 검토
4) CASE 도구 활용 : '일관성 분석(Consistency Analysis)' 을 통해 요구사항 변경사항의 추적, 분석, 관리, 표준 준수 여부를 확인

* 인터페이스 요구사항 검증의 주요 항목
1) 완전성 (Completeness) : 사용자의 모든 요구사항이 누락되지 않고, 완전하게 반영되어 있는가?
2) 일관성 (Consistency) : 요구사항이 모순되거나 충돌되는 점 없이 일관성을  유지하고 있는가?
3) 명확성 (Unambiguity) : 모든 참여자가 요구사항을 명확히 이해할 수 있는가?
4) 기능성 (Functionality) : 요구사항이 '어떻게(How to)' 보다 '무엇(What)' 에 중점을 두고 있는가?
5) 검증 가능성 (Verifiability) : 요구사항이 사용자의 요구를 모두 만족하고, 개발된 소프트웨어가 사용자의 요구 내용과 일치하는지를 검증할 수 있는가?
6) 추적 가능성 (Traceability) : 요구사항 명세서와 설계서를 추적할 수 있는가?
7) 변경 용이성 (Easily changeable) : 요구사항 명세서의 변경이 쉽도록 작성되었는가?


# 03. 인터페이스 시스템 식별

* 인터페이스 시스템 식별
- 인터페이스별로 인터페이스에 참여하는 시스템들을 '송신 시스템' 과 '수신 시스템'으로 구분하여 작성하는 것

* 인터페이스 시스템 식별을 위한 선행 작업
- 개발 시스템과 내, 외부 시스템 식별 : 개발할 시스템과 이와 연결할 내, 외부 시스템의 상세 식별 정보를 정의하고 목록을 작성
- 내, 외부 시스템 환경 및 관리 주체 식별
  -- 내, 외부 시스템의 실제 '운용 환경' 과 '하드웨어 관리 주체' 를 확인
  -- 내, 외부 시스템 환경 : 연계할 시스템 접속에 필요한 IP 또는 URL, Port 정보 등 시스템의 실제 운용 환경
  -- 내, 외부 시스템 관리 주체 : 하드웨어 관리 담당자
- 내, 외부 시스템 네트워크 연결 정보 식별 : 내, 외부 시스템을 연계하는데 필요한 시스템 로그인 및 DB 정보 등의 네트워크 연결 정보를 확인
- 인터페이스 식별 : 개발할 시스템과 연계할 내, 외부 시스템 사이의 인터페이스를 식별하고 인터페이스 목록을 작성


# 04. 송, 수신 데이터 식별

* 식별 대상 데이터
- '송, 수신 시스템 사이에서 교환되는 데이터' 로 규격화된 표준 형식에 따라 전송됨

** 교환되는 데이터의 종류
- 인터페이스 표준 항목, 송수신 데이터 항목, 공통 코드

* 인터페이스 표준 항목
- 송, 수신 시스템을 연계하는데 표준적으로 필요한 데이터
- 인터페이스 표준 항목은 '시스템 공통부' 와 '거래 공통부' 로 나뉨
  -- 시스템 공통부 : 시스템 간 연동 시 필요한 공통정보 / ex) 인터페이스ID, 전송 시스템 정보, 서비스 코드 정보, 응답 결과 정보, 장애 정보 등
  -- 거래 공통부 : 시스템들이 연동된 후 송, 수신 되는 데이터를 처리할 때 필요한 정보 / ex) 직원 정보, 승인자 정보, 기기 정보, 메체 정보 등

* 송, 수신 데이터 항목
- '송, 수신 시스템이 업무를 수행하는데 사용하는 데이터'
- 전송되는 데이터 항목과 순서는 인터페이스별로 다름

* 공통 코드
- '시스템들에거 공통으로 사용하는 코드'
- 연계 시스템이나 연계 소프트웨어에서 사용하는 상태 및 오류 코드 등 항목에 대해 코드값과 코드명, 코드 설명 등을 공통 코드로 관리

* 정보 흐름 식별
- 정보 흐름은 개발할 시스템과 내, 외부 시스템 사이에서 전송되는 정보들의 방향성을 식별
- 개발할 시스템과 내, 외부 시스템에 대한 각각의 인터페이스 목록을 확인하여 정보 흐름을 식별
- 식별한 정보 흐름을 기반으로 송, 수신 시스템 사이에서 교환되는 주요 데이터 항목이나 정보 그룹을 도출함

* 송, 수신 데이터 식별
- 송, 수신 데이터는 개발할 시스템과 연계할 내, 외부 시스템 사이의 정보 흐름과데이터베이스 산출물을 기반으로 식별함

** 송, 수신 데이터의 종류에 따라 식별하는 방법
1) 인터페이스 표준 항목과 송, 수신 데이터 항목 식별 : 송, 수신 시스템 사이의 교환 범위를 확인하고, 인터페이스 표준 항목에 대해 송, 수신 데이터 항목을 식별
2) 코드성 데이터 항목 식별 : 코드성 데이터 항목에 대해 코드, 코드명, 코드 설명 등의 코드 정보를 식별함


# 05. 인터페이스 방법 명세화

* 인터페이스 방법 명세화
- 내외부 시스템이 연계하여 작동할 때, 인터페이스별 송수신 방법, 송수신의 데이터, 오류 식별 및 처리 방안에 대한 내용을 문서로 정리하는 것
  -- 송수신 방법 명세화 : 내외부 인터페이스 목록에 있는 각각의 인터페이스에 대해 연계 방식, 통신 및 처리 유형, 발생 주기 등의 송수신 방법을 정의하고 명세를 작성하는 것
  -- 송수신 데이터 명세화 : 내외부 인터페이스 목록에 있는 각각의 인터페이스에 대해 인터페이스 시 필요한 송수신 데이터에 대한 명세를 작성하는 것
  -- 오류 식별 및 처리 방안 명세화 : 내외부 인터페이스 목록에 있는 각각의 인터페이스에 대해 인터페이스 시 발생할 수 있는 오류를 식별하고, 오류 처리 방안에 대한 명세를 작성하는 것

* 인터페이스별로 송수신 방법을 명세화 하기 위해 필요한 정보
- 시스템 연계 기술, 인터페이스 통신 유형, 처리 유형, 발생 주기

* 시스템 연계 기술
1) DB Link : DB에서 제공하는 'DB Link' 객체를 이용하는 방식
2) API, Open API : 송신 시스템의 데이터베이스(DB) 에서 데이터를 읽어와 제공하는 애플리케이션 프로그래밍 인터페이스 프로그램
3) 연계 솔루션 : 'EAI 서버' 와 송수신 시스템에 설치되는 '클라이언트(Client)'를 이용하는 방식
4) Socket : 서버가 통신을 위한 소켓(Socket)을 생성하여 포트를 할당하고 클라이언트의 통신 요청 시 클라이언트와 연결하여 통신하는 네트워크 기술
5) Web Service : '웹 서비스(Web Service)' 에서 WSDL, UDDI, SOAP 프로토콜을 이용하여 연계하는 서비스

* 인터페이스 통신 유형
1) 단방향 : 시스템에서 거래를 요청만 하고 응답이 없는 방식
2) 동기 : 시스템에서 거래를 요청하고 응답이 올 때까지 '대기(Request-Reply)' 하는 방식
3) 비동기 : 시스템에서 거래를 요청하고, 다른 작업을 수행하다 응답이 오면 처리하는 방식

* 인터페이스 처리 유형
1) 실시간 방식 : 사용자가 요청한 내용을 바로 처리해야 할 때 사용하는 방식
2) 지연 처리 방식 : 데이터를 매건 단위로 처리할 경우, 비용이 많이 발생할 때 사용하는 방식
3) 배치 방식 : 대량의 데이터를 처리할 때 사용하는 방식

* 인터페이스 발생 주기
- 개발할 시스템과 내외부 시스템 간 송수신 데이터가 전송되어 인터페이스가 사용되는 주기
- 업무의 성격과 송수신 데이터 전송량을 고려하여 '매일', '수시', '주 1회' 등으로 구분


# 06. 미들웨어 솔루션

* 미들웨어 (Middleware)
- '운영체제와 응용 프로그램', 또는 서버와 클라이언트 사이에서 다양한 서비스를 제공하는 소프트웨어
- 표준화된 인터페이스를 제공함으로써 시스템 간 데이터 교환에 일관성을 보장함

** 미들웨어의 종류
1) DB (DataBase)
- 데이터베이스 벤더에서 제공하는 '클라이언트에서 원격의 데이터베이스와 연결하는 미들웨어'
- DB를 사용하여 시스템을 구축하는 경우, 보통 '2-Tier 아키텍처' 라고 함

2) RPC (원격 프로시저 호출, Remote Procedure Call)
- 응용 프로그램의 프로시저를 사용하여 '원격 프로시저' 를 마치 '로컬 프로시저' 처럼 호출하는 미들웨어

3) MOM (메시지 지향 미들웨어, Message Oriented Middleware)
- 메시지 기반의 '비동기형 메시지를 전달하는 미들웨어'
- 온라인 업무보다는 '이기종 분산 데이터 시스템'의 데이터 동기를 위해 많이 사용됨

4) TP-Monitor (트랜잭션 처리 모니터, Transaction Processing Monitor)
- 온라인 트랜잭션 업무에서 '트랜잭션을 처리 및 감시하는 미들웨어'
- 항공기나 철도 예약 업무 등 사용자 수가 증가해도 빠른 응답 속도를 유지해야 하는 업무에 주로 사용됨

5) ORB (객체 요청 브로커, Object Request Broker)
- '코바(CORBA)' 표준 스펙을 구현한 객체 지향 미들웨어
- 최근에는 'TP-Monitor' 의 장점인 트랜잭션 처리와 모니터링 등을 추가로 구현한 제품도 있음
- 분산 프로그램 객체 생성, 배포, 관리

6) WAS (웹 애플리케이션 서버, Web Application Server)
- 사용자의 요구에 따라 변하는 '동적인 콘텐츠를 처리하기 위한 미들웨어'
- 클라이언트/서버 환경보다는 '웹 환경' 을 구현하기 위한 미들웨어
- HTTP 세션 처리를 위한 웹 서버 기능뿐만 아니라 미션-크리티컬한 기업 업무까지 Java, EJB 컴포넌트 기반으로 구현 가능


# 07. 모듈 간 공통 기능 및 데이터 인터페이스 확인

* 모듈 간 공통 기능 및 데이터 인터페이스
- 공통 기능 : 모듈의 기능 중에서 공통적으로 제공되는 기능
- 데이터 인터페이스 : 모듈 간 교환되는 데이터가 저장될 파라미터

** 모듈 간 공통 기능 및 데이터 인터페이스 확인 절차
1) 인터페이스 설계서를 통해 모듈별 기능을 확인
2) 외부 및 내부 모듈을 기반으로 공통으로 제공되는 기능과 각 데이터의 인터페이스를 확인

* 인터페이스 설계서
- 시스템 사이의 데이터 교환 및 처리를 위해 '교환 데이터 및 관련 업무, 송수신 시스템 등에 대한 내용을 정의한 문서'

** 인터페이스 설계서 종류
1) 일반적인 인터페이스 설계서
- 시스템의 인터페이스 목록, 각 인터페이스의 상세 데이터 명세, 각 기능의 세부 인터페이스 정보를 정의한 문서
- 종류 : 시스템 인터페이스 설계서, 상세 기능별 인터페이스 명세서

2) 정적, 동적 모형을 통한 인터페이스 설계서
- 정적, 동적 모형으로 각 시스템의 구성 요소를 표현한 '다이어그램'을 이용하여 만든 문서
- 시스템을 구성하는 주요 구성 요소 간 트랜잭션을 통해 해당 인터페이스가 시스템의 어느 부분에 속하고, 해당 인터페이스를 통해 상호 교환되는 트랜잭션의 종류를 확인할 수 있음

* 인터페이스 설계서별 모듈 기능 확인
- 인터페이스 설계서별 모듈 기능은 인터페이스 설계서에서 정의한 모듈을 기반으로 각 모듈의 기능을 확인

1) 시스템 인터페이스 목록 : 송신 및 전달 부분 (외부 모듈) / 수신 부분 (내부 모듈)
2) 시스템 인터페이스 설계서 : 데이터 송신 시스템 부분 (외부 모듈) / 데이터 수신 시스템 부분 (내부 모듈)
3) 상세 기능 인터페이스 명세서 : 오퍼레이션, 사전 조건 (외부 모듈) / 사후 조건 (내부 모듈)
4) 정적, 동적 모형을 통한 인터페이스 설계서 : 인터페이스 영역 (외부 모듈) / 인터페이스 영역을 제외한 나머지 부분(내부 모듈)

* 모듈 간 공통 기능 및 데이터 인터페이스 확인
- 공통 기능 : 내외부 모듈 기능을 통해 공통으로 제공되는 기능 확인
- 데이터 인터페이스 : 내외부 모듈 기능과 공통 기능을 기반으로 필요한 데이터 인터페이스 항목 확인


# 08. 모듈 연계를 위한 인터페이스 기능 식별

* 모듈 연계
- 내부 모듈과 외부 모듈 도는 내부 모듈 간 데이터 교환을 위해 관계를 설정하는 것

** 대표적인 모듈 연계 방법
1) EAI (Enterprise Application)
- '기업 내 각종 애플리케이션 및 플랫폼 간' 의 정보 전달, 연계, 통합 등 '상호 연동이 가능하게 해주는 솔루션'

** 구축 유형
- Point-to-Point : 가장 기본적인 애플리케이션 통합 방식 / 애플리케이션을 1:1로 연결 / 변경 및 재사용이 어렵
- Hub & Spoke : 단일 접점인 허브 시스템을 통해 데이터를 전송하는 '중앙 집중형 방식' / 확장 및 유지보수 용이 / 허브 장애 발생 시, 시스템 전체에 영향을 미침
- Message Bus (ESB 방식) : 애플리케이션 사이에 '미들웨어' 를 두어 처리하는 방식 / 확장성이 뛰어나며 대용량 처리가 가능함
- Hybrid : 'Hub & Spoke 와 Message Bus' 의 혼합 방식 / 그룹 내에서는 'Hub & Spoke' 방식, 그룹 간에는 'Message Bus' 방식 사용 / 필요한 경우 한 가지 방식으로 EAI 구현이 가능 / 데이터 병목 현상을 최소화할 수 있음

2) ESB (Enterprise Service Bus) : 애플리케이션 사이에 미들웨어를 두어 정보를 처리하는 Message Bus와 동일한 방식의 솔루션
- '애플리케이션 간 연계', 데이터 변환, 웹 서비스 지원 등 '표준 기반의 인터페이스를 제공하는 솔루션'
- 애플리케이션 통합 측면에서 'EAI' 와 유사하지만, 애플리케이션 보다는 '서비스 통합'을 지향
- 특정 서비스에 국한되지 않고 범용적으로 사용하기 위하여 애플리케이션과의 '결합도(Coupling)' 를 약하게(Loosely) 유지
- 관리 및 보안 유지가 쉬움 / 높은 수준의 품질 지원이 가능

3) 웹 서비스 (Web Service)
- '네트워크 정보를 표준화된 서비스 형태로 만들어 공유하는 기술'
- 웹 서비스는 '서비스 지향 아키텍처(SOA)' 개념을 실현하는 대표적 방법
  -- 서비스 지향 아키텍처(SOA, Service Oriented Architecture) : 기업의 소프트웨어 인프라인 정보 시스템을 공유와 재사용이 가능한 ㅅ거비스 단위나 컴포넌트 중심으로 구축하는 정보 기술 아키텍쳐

** 웹 서비스 구성
1) SOAP : HTTP, HTTPS, SMTP 등을 활용하여 XML 기반의 메시지를 네트워크 상에서 교환하는 프로토콜
2) UDDI : WSDL을 등록하여 서비스와 서비스 제공자를 검색하고 접근하는데 사용됨
3) WSDL : 웹 서비스명, 서비스 제공 위치, 프로토콜 등 웹 서비스에 대한 상세 정보를 XML 형식으로 구현

* 모듈 간 연계 기능 식별
- 모듈 간 연계 기능은 모듈과 연계된 기능을 '시나리오' 형태로 구체화하여 식별함
- 식별된 연계 기능은 인터페이스 기능을 식별하는데 사용

* 모듈 간 인터페이스 기능 식별
- 모듈 간 인터페이스 기능은 식별된 모듈 간 관련 기능을 검토하여 인터페이스 동작에 필요한 기능을 식별함
- 외부 및 인터페이스 모듈 간 동작하는 기능을 통해 인터페이스 기능을 식별
- 해당 업무에 대한 '시나리오' 를 통해 내부 모듈과 관련된 인터페이스 기능을 식별
- 식별된 인터페이스 기능 중 실제적으로 필요한 인터페이스 기능을 최종적으로 선별
- 식별된 인터페이스 기능은 인터페이스 기능 구현을 정의하는데 사용됨


# 09. 모듈 간 인터페이스 데이터 표준 확인

* 인터페이스 데이터 표준
- '모듈 간 인터페이스에 사용되는 데이터의 형식을 표준화하는 것'
- 기존 데이터 중에서 공통 영역을 추출하거나 어느 한쪽의 데이터를 변환하여 정의
- 확인된 인터페이스 데이터 표준은 인터페이스 기능 구현을 정의하는데 사용

* 인터페이스 데이터 표준 확인
1) 데이터 인터페이스 확인 : 데이터 표준을 위해 식별된 데이터 인터페이스에서 입출력값의 의미와 데이터의 특성 등 구체적으로 확인
2) 인터페이스 기능 확인 : 데이터 표준을 위해 식별된 인터페이스 기능을 기반으로 인터페이스 기능 구현을 위해 필요한데이터 항목을 확인함
3) 인터페이스 데이터 표준 확인 : 데이터 인터페이스에서 확인된 데이터 표준과 인터페이스 기능을 통해 확인된 데이터 항목들을 검토하여 최종적으로 데이터 표준을 확인함


# 10. 인터페이스 기능 구현 정의

* 인터페이스 기능 구현의 정의
- 인터페이스를 실제로 구현하기 위해 인터페이스 기능에 대한 구현 방법을 기능별로 기술하는 것

** 인터페이스 기능 구현 정의 절차
1) 컴포넌트 명세서 확인 : 컴포넌트 개요, 내부 클래스의 클래스명과 설명 등을 통해 컴포넌트가 가지고 있는 주요 기능을 확인 / 인터페이스 클래스를 통해 인터페이스에 필요한 주요 기능을 확인함
2) 인터페이스 명세서 확인 : 컴포넌트 명세서의 인터페이스 클래스에 명시된 인터페이스 세부 조건 및 기능을 확인함
3) 일관된 인터페이스 기능 구현 정의 : 인터페이스의 기능, 인터페이스의 데이터 표준, 모듈 세부 설계서를 통해 인터페이스의 기능 구현을 정의 / 정의한 인터페이스 기능 구현에 대해 송,수신 측에서 진행해야 할 절차까지 다시 세부적으로 정의
4) 정의된 인터페이스 기능 구현 정형화 : 정의한 인터페이스 기능 구현을 특정 하드웨어나 소프트웨어에 의존적이지 않게 사람들이 보기 쉽고 표준화 되도록 정형화함

* 모듈 세부 설계서
- '모듈의 구성 요소와 세부적인 동작 등을 정의한 설계서

** 모듈 세부 설계서의 종류
- 컴포넌트 명세서 : 컴포넌트의 개요 및 내부 클래스의 동작, 인터페이스를 통해 외부와 통신하는 명세 등을 정의한 것
- 인터페이스 명세서 : 컴포넌트 명세서의 항목 중 인터페이스 클래스의 세부 조건 및 기능 등을 정의한 것


# 11. 인터페이스 구현

* 인터페이스 구현
- '송수신 시스템 간의 데이터 교환 및 처리를 실현해 주는 작업'

** 대표적인 인터페이스 구현 방법
1) 데이터 통신을 이용한 인터페이스 구현
- '애플리케이션 영역' 에서 데이터 포맷을 인터페이스 대상으로 전송하면, 이를 수신 측에서 '파싱(Parsing)' 하여 해석하는 방식
- 주로 'JSON' 이나 'XML' 형식의 데이터 포맷을 사용하여 인터페이스를 구현
  -- 'JSON'을 이용한 인터페이스 구현 순서
     ① 송신 측에서 인터페이스 객체를 생성할 데이터를 각 시스템 환경에 맞게 선택
     ② JSON을 이용해 데이터를 인터페이스 객체로 만듦
     ③ 인터페이스 객체를 AJAX 기술 등을 이용하여 수신 측으로 보냄
     ④ 수신 측에서 인터페이스 객체를 수신해 파싱한 후 처리
     ⑤ 수신 측에서 송신 측으로 처리 결과를 보냄

2) 인터페이스 엔티티를 이용한 인터페이스 구현
- 인터페이스가 필요한 시스템 사이에 별도의 '인터페이스 엔티티'를 두어 상호 연계하는 것
- 일반적으로 인터페이스 테이블을 '엔티티'로 활용
  -- '인터페이스 테이블' 을 이용한 인터페이스 구현 순서
     ① 송신 측에서 인터페이스 이벤트가 발생하면 인터페이스 테이블에 인터페이스 데이터를 기록 (Write)
     ② 송신 측 인터페이스 테이블에서 정해진 주기에 따라 인터페이스 데이터를 전송함
     ③ 수신 측 인터페이스 테이블에 인터페이스 데이터가 입력되면 정해진 주기에 따라 인터페이스 데이터를 읽음 (Read)
     ④ 수신 측 인터페이스 테이블에서 인터페이스 데이터를 읽은 후 사전에 정의된 데이터 트랜잭션을 수행함 

* JSON (JavaScript Object Notation)
- 웹과 컴퓨터 프로그램에서 용량이 적은 '데이터를 교환하기 위해 데이터 객체를 속성,값의 쌍 (Attribute-Value Paris) 형태로 표현하는 개방형 표준 포맷'
- 비동기 처리에 사용되는 AJAX에서 XML을 대체하여 사용되고 있음

* AJAX (Asynchronous JavaScript and XML)
- '자바 스크립트(JavaScript)' 를 사용하여 '클라이언트 서버 간에 XML 데이터를 주고 받는 비동기 통신 기술'
- 전체 페이지를 새로 고치지 않고도 웹 페이지 일부 영역만을 업데이트 할 수 있음


# 12. 인터페이스 예외 처리

* 인터페이스 예외 처리
- 구현된 인터페이스가 동작하는 과정에서 기능상 예외 상황이 발생했을 때 이를 처리하는 절차

** 인터페이스 예외 처리 방법
1) 데이터 통신을 이용한 방법
- 인터페이스 객체의 송수신 시 발생할 수 있는 예외 케이스를 정의하고, 각 예외 케이스마다 예외 처리 방법을 기술
- 'JSON', 'XML' 등 인터페이스 객체를 이용해 구현한 인터페이스 동작이 실패한 경우를 대비한 것

2) 인터페이스 엔티티를 이용한 방법
- 인터페이스 동작이 실패한 경우를 대비하여 해당 엔티티에 인터페이스 실패 상황과 원인 등을 기록하고, 이에 대한 조치를 취할 수 있도록 사용자 및 관리자에게 알려주는 방식으로 예외 처리 방법을 정의함


# 13. 인터페이스 보안

* 인터페이스 보안
- 인터페이스의 보안성 향상을 위해 '인터페이스의 보안 취약점을 분석한 후, 적절한 보안 기능을 적용하는 것'

* 인터페이스 보안 기능 적용
- 일반적으로 '네트워크', '애플리케이션', '데이터베이스 영역' 에 적용

1) 네트워크 영역
- 인터페이스 송수신 간 '스니핑(Sniffing)' 등을 이용한 데이터 탈취 및 변조 위협을 방지하기 위해 네트워크 트래픽에 대한 '암호화' 를 설정함
- 암호화는 인터페이스 아키텍처에 따라 'IPSec', 'SSL', 'S-HTTP' 등의 다양한 방식을 사용

2) 애플리케이션 영역
- 소프트웨어 개발 보안 가이드를 참조하여 애플리케이션 코드 상의 보안 취약점을 보완하는 방향으로 애플리케이션 보안 기능을 적용함

3) 데이터베이스 영역
- 데이터베이스, 스키마, 엔티티의 접근 권한과 '프로시저(Procedure)', '트리거(Trigger)' 등 데이터베이스 동작 객체의 보안 취약점에 보안 기능을 적용함
- 개인 정보나 업무상 민감한 데이터의 경우 '암호화' 나 '익명화' 등 데이터 자체의 보안 방안도 고려함

** IPSec (IP Security) : 네트워크 계층에서 IP 패킷 단위의 데이터 변조 방지 및 은닉 기능을 제공하는 프로토콜
** SSL (Secure Sockets Layer) : TCP/IP 계층과 애플리케이션 계층 사이에서 인증, 암호화, 무결성을 보장하는 프로토콜
** S-HTTP (Secure Hypertext Transfer Protocol) : 클라이언트와 서버 간에 전송되는 모든 메시지를 암호화하는 프로토콜

* 데이터 무결성 검사 도구
- 인터페이스 보안 취약점을 분석하는데 사용되는 도구
- 시스템 파일의 변경 유무를 확인하고, 파일이 변경되었을 경우 이를 관리자에게 알려줌
  -- 종류 : Tripwire, AIDE, Samhain, Claymore, Slipwire, Fcheck 등


# 14. 인터페이스 구현 검증

* 인터페이스 구현 검증
- 인터페이스가 정상적으로 문제없이 작동하는지 확인하는 것
- 인터페이스 구현 '검증 도구' 와 '감시 도구' 를 이용하여 인터페이스의 동작 상태를 확인

* 인터페이스 구현 검증 도구
- 인터페이스 구현을 검증하기 위해서는 '인터페이스 단위 기능'과 '시나리오' 등을 기반으로 하는 '통합 테스트' 가 필요
- 통합 테스트를 수행하기 위해 사용하는 테스트 자동화 도구

1) xUnit : Java(Junit), C++(Cppunit), .Net(Nunit) 등 다양한 언어를 지원하는 단위 테스트 프레임워크
2) STAF : 서비스 호출 및 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크 / '크로스 플랫폼'이나 '분산 소프트웨어'에서 테스트 환경을 조성할 수 있도록 지원함
	분산 소프트웨어의 경우 각 분산 환경에 설치된 '데몬' 이 프로그램 테스트에 대한 응답을 대신하며, 테스트가 완료되면 이를 통합하고 자동화하여 프로그램을 완성함
3) FitNesse : 웹 기반 테스트 케이스 설계, 실행, 결과 확인 등을 지원하는 테스트 프레임워크
4) NTAF : 'FitNesse' 의 장점인 협업 기능과 'STAF' 의 장점인 재사용 및 확장성을 통합한 'NHN(Naver)'의 테스트 자동화 프레임워크
5) Selenium : 다양한 브라우저 및 개발 언어를 지원하는 웹 애플리케이션 테스트프레임워크
6) watir : 'Rudy' 를 사용하는 애플리케이션 테스트 프레임워크

* 인터페이스 구현 감시 도구
- 인터페이스 동작 상태는 'APM(애플리케이션 성능 관리)' 을 사용하여 '감시(Monitoring)' 할 수 있음
- 'APM' 을 통해 데이터베이스와 웹 애플리케이션의 트랜잭션, 변수값, 호출 함수, 로그 및 시스템 부하 등 종합적인 정보를 조회하고 분석할 수 있음

** 대표적인 APM
1) 스카우터 (Scouter) : 애플리케이션 및 OS 자원에 대한 모니터링 기능을 제공하는 오픈소스 APM 소프트웨어
2) 제니퍼 (Jennifer) : 애플리케이션 개발부터 테스트, 오픈, 운영, 안정화 까지 전 단계에 걸쳐 성능을 모니터링하고 분석해주는 소프트웨어

* APM (Application Performance Management/Monitoring)
- '애플리케이션의 성능 관리를 위해' 접속자, 자원 현황, 트랜재션 수행 내역, 장애 진단 등 '다양한 모니터링 기능을 제공하는 도구'
- '리소스 방식' 과 '엔드투엔드(End-to-End)' 2가지 유형이 있음
  -- 리소스 방식 : Nagios, Zabbix, Cacti 등
  -- 엔드투엔드 방식 : VisualVM, 제니퍼, 스카우터 등
















































