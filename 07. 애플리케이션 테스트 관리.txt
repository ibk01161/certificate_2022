
# 01. 애플리케이션 테스트

* 애플리케이션 테스트
- '애플리케이션에 잠재되어 있는 결함을 찾아내는 일련의 행위 또는 절차'
- 개발된 소프트웨어가 '고객의 요구사항을 만족시키는지 확인(Validation)' 하고, '소프트웨어가 기능을 정확히 수행하는지를 검증(Verification)' 함

* 애플리케이션 테스트의 기본 원리
1) 완벽한 테스트 불가능 : 소프트웨어의 잠재적인 결함은 줄일 수 있지만, 소프트웨어에 결함이 없다고 증명할 수는 없음
2) 파레토 법칙 (Pareto Principle) : 애플리케이션 20%에 해당하는 코드에서 전체 결함의 80%가 발견된다는 법칙
3) 살충제 패러독스 (Pesticide Paradox) : 동일한 테스트 케이스로 동일한 테스트를 반복하면 더 이상 결함이 발견되지 않는 현상
4) 테스팅은 정황 (Context) 의존 : 소프트웨어의 특징, 테스트 환경, 테스터의 역량 등 정황(Context)에 따라 테스트 결과가 달라질 수 있으므로, 정황에 따라 테스트를 다르게 수행해야 함
5) 오류-부재의 궤변 (Absence of Errors Fallacy) : 소프트웨어의 결함을 모두 제거해도 사용자의 요구사항을 만족시키지 못하면 해당 소프트웨어는 품질이 높다고 말할 수 없는 것
6) 테스트와 위험은 반비례 : 테스트를 많이 하면 할수록 미래에 발생할 위험을 줄일 수 있음
7) 테스트의 점진적 확대 : 테스트는 작은 부분에서 시작하여 점점 확대하며 진행해야 함
8) 테스트의 별도 팀 수행 : 테스트는 개발자와 관계없는 별도의 팀에서 수행해야 함


# 02. 애플리케이션 테스트의 분류

* '프로그램 실행 여부'에 따른 테스트
1) 정적 테스트 : 프로그램을 실행하지 않고 '명세서' 나 '소스 코드' 를 대상으로 분석하는 테스트 / 소스 코드에 대한 코딩 표준, 코딩 스타일, 코드 복잡도, 남은 결함 등을 발견하기 위해 사용
	        종류 : 워크스루, 인스펙션, 코드 검사 등
2) 동적 테스트 : 프로그램을 실행하여 오류를 찾는 테스트 / 소프트웨어 개발의 모든 단계에서 테스트를 수행함
	        종류 : 블랙박스, 화이트박스 테스트

** 워크스루 (Walkthrough, 검토 회의)
- 소프트웨어 개발자가 모집한 전문가들이 개발자의 자업 내역을 검토
- 소프트웨어 검토를 위해 미리 준비된 자료를 바탕으로 정해진 절차에 따라 평가
- 오류의 조기 검출을 목적으로 하며, 발견된 오류는 문서화

** 인스펙션 (Inspection)
- 워크스루를 발전시킨 형태 / 소프트웨어 개발 단계에서 산출된 결과물의 품질을 평가하고, 이를 개선하기 위한 방법을 제시함

* '테스트 기반 (Test Bases)' 에 따른 테스트
1) 명세 기반 테스트 : 사용자의 요구사항에 대한 명세를 빠짐없이 테스트 케이스로 만들어 구현하고 있는지 확인하는 테스트 / 종류 : 동등 분할, 경계 값 분석
2) 구조 기반 테스트 : 소프트웨어 내부의 논리 흐름에 따라 테스트 케이스를 작성하고 확인하는 테스트 / 종류 : 구문 기반, 결정 기반, 조건 기반
3) 경험 기반 테스트 : 유사 소프트웨어나 기술 등에 대한 테스터의 경험을 기반으로 수행하는 테스트 / 사용자의 요구사항에 대한 명세가 불충분하거나 테스트 시간에 제약이 있는 경우 수행하면 효과적임
		   종류 : 에러 추정, 체크 리스트, 탐색적 테스팅

* '시각'에 따른 테스트
1) 검증 (Verification) 테스트 : 개발자의 시각에서 제품의 생산 과정을 테스트하는 것 / 제품이 명세서대로 완성됐는지를 테스트함
2) 확인 (Validation) 테스트 : 사용자의 시각에서 생산된 제품의 결과를 테스트하는 것 / 사용자가 요구한대로 제품이 완성됐는지, 제품이 정상적으로 동작하는지를 테스트함

* '목적'에 따른 테스트
1) 회복 (Recovery) 테스트 : 시스템에 여러 가지 결함을 주어 실패하도록 한 후, 올바르게 복구되는지를 확인하는 테스트
2) 안전 (Security) 테스트 : 시스템에 설치된 시스템 보호 도구가 불법적인 침입으로부터 시스템을 보호할 수 있는지를 확인하는 테스트
3) 강도 (Stress) 테스트 : 시스템에 과도한 정보량이나 빈도 등을 부과하여 과부하 시에도 소프트웨어가 정상적으로 실행되는지를 확인하는 테스트
4) 성능 (Performance) 테스트 : 소프트웨어의 실시간 성능이나 전체적인 효율성을 진단하는 테스트로, 소프트웨어의 응답 시간, 처리량 등을 테스트
5) 구조 (Structure) 테스트 : 소프트웨어 내부의 논리적인 경로, 소스 코드의 복잡도 등을 평가하는 테스트
6) 회귀 (Regression) 테스트 : 소프트웨어의 변경 또는 수정된 코드에 새로운 결함이 없음을 확인하는 테스트
7) 병행 (Parallel) 테스트 : 변경된 소프트웨어와 기존 소프트에어에 동일한 데이터를 입력하여 결과를 비교하는 테스트


# 03. 테스트 기법에 따른 애플리케이션 테스트

* 화이트박스 테스트 (White Box Test)
- 모듈의 원시 코드를 오픈시킨 상태에서 '원시 코드의 논리적인 모든 경로를 테스트하여 테스트 케이스를 설계하는 방법'
- 모듈 안의 작동을 직접 관찰함
- 원시 코드(모듈) 의 모든 문장을 한 번 이상 실행함으로써 수행됨

* 화이트박스 테스트의 종류
1) 기초 경로 검사 (Base Path Testing) : 테스트 케이스 설계자가 절차적 설계의 논리적 복합성을 측정할 수 있게 해주는 테스트 기법 / 대표적인 화이트박스 테스트 기법

2) 제어 구조 검사 (Control Structure Testing)
- 조건 검사 (Condition Testing) : 프로그램 모듈 내에 있는 논리적 조건을 테스트하는 테스트 케이스 설계 기법
- 루프 검사 (Loop Testing) : 프로그램의 반복(Loop) 구조에 초점을 맞춰 실시하는 테스트 케이스 설계 기법
- 데이터 흐름 검사 (Data Flow Testing) : 프로그램에서 변수의 정의와 변수 사용의 위치에 초점을 맞춰 실시하는 테스트 케이스 설계 기법










































































































