
# 01. Secure SDLC

* Secure SDLC
- 보안상 안전한 소프트웨어를 개발하기 위해 'SDLC에 보안 강화를 위한 프로세스를 포함한 것'
  -- 소프트웨어 개발 생명주기 (SDLC, Software Development Life Cycle)
     - 소프트웨어 개발 방법론의 바탕이 되는 것
     - 소프트웨어를 개발하기 위해 정의하고, 운용, 유지보수 등의 전 과정을 각 단계별로 나눈 것
- 요구사항 분석, 설계, 구현, 테스트, 유지보수 등 SDLC 전체 단계에 걸쳐 수행되어야 할 보안 활동을 제시함

** Secure SDLC의 대표적인 방법론
1) CLASP : SDLC의 '초기 단계'에서 '보안을 강화'하기 위해 개발된 방법론
2) SDL : 마이크로소프트 사에서 '안전한 소프트웨어 개발'을 위해 '기존의 SDLC를 개선'한 방법론
3) Seven Touchpoints : 소프트웨어 보안의 '모범사례를 SDLC에 통합한 방법론'

* SDLC 단계별 보안 활동
1) 요구사항 분석 단계 : 보안 항목에 해당하는 요구사항을 식별하는 작업 수행
2) 설계 단계 : 식별된 보안 요구사항들을 소프트웨어 설계서에 반영하고, 보안 설계서를 작성
3) 구현 단계 : 표준 코딩 정의서 및 소프트웨어 개발 보안 가이드를 준수하며, 설계서에 따라 보안 요구사항들을 구현함
4) 테스트 단계 : 설계 단계에서 작성한 보안 설계서를 바탕으로 보안 사항들이 정확히 반영되고 동작하는지 점검
5) 유지보수 단계 : 이전 과정을 모두 수행하였음에도 발생할 수 있는 보안사고들을 식별함 / 사고 발생 시, 이를 해결하고 보안 패치를 실시함

* 소프트웨어 개발 보안 요소
1) 기밀성 (Confidentiality) : 시스템 내의 정보와 자원은 '인가된 사용자에게만 접근 허용' / 정보가 전송 중에 노출되더라도 데이터를 읽을 수 없음
2) 무결성 (Integrity) : 시스템 내의 정보는 오직 '인가된 사용자만 수정'할 수 있음
3) 가용성 (Availability) : 인가받은 사용자는 시스템 내의 '정보와 자원을 언제라도 사용'할 수 있음
4) 인증 (Authentication) : 시스템 내의 정보와 자원을 사용하려는 사용자가 합법적인 사용자인지를 확인하는 모든 행위 / 대표적 방법 : 패스워드, 인증용 카드, 지문 검사 등
5) 부인 방지 (NonRepudiation) : 데이터를 송수신한 자가 송수신 사실을 부인할 수 없도록 송수신 증거를 제공

* 시큐어 코딩 (Secure Coding)
- '구현 단계' 에서 발생할 수 있는 보안 취약점들을 최소화하기 위해 '보안 요소들을 고려하여 코딩하는 것'
- 보안 취약점을 사전 대응하여 '안정성' 과 '신뢰성'을 확보
- 보안 정책을 바탕으로 시큐어 코딩 가이드를 작성하고, 개발 참여자에게는 시큐어 코딩 교육을 실시

# 02. 세션 통제

* 세션 통제
- '세션의 연결과 연결로 인해 발생하는 정보를 관리하는 것'
- 소프트웨어 개발 과정 중, '요구사항 분석 및 설계 단계' 에서 진단해야 하는 보안 점검 내용

** 세션 통제의 보안 약점
- 불충분한 세션 관리 : 일정한 규칙이 존재하는 '세션ID' 가 발급되거나, 타임아웃이 너무 길게 설정되어 있는 경우 발생하는 보안 약점
- 잘못된 세션에 의한 정보 노출 : '다중 스레드(Multi-Thread)' 환경에서 맴버 변수에 정보를 저장할 때 발생하는 보안 약점

*** 세션ID (Session ID) : 서버가 클라이언트들을 구분하기 위해 부여하는 키(Key)로, 클라이언트가 서버에 요청을 보낼 때마다 세션ID를 통해 인증이 수행됨

* 세션 설계 시 고려 사항
- 시스템의 모든 페이지에서 로그아웃이 가능하도록 'UI(User Interface)' 를 구성
- 로그아웃 요청 시, 할당된 세션이 완전히 제거되도록 함
- '세션 타임아웃' 은 중요도가 높으면 '2~5분' 낮으면 '15~30분' 으로 설정
- 이전 세션이 종료되지 않으면 새 세션이 생성되지 못하도록 설계
- 중복 로그인을 허용하지 않은 경우, 클라이언트의 중복 접근에 대한 세션 관리 정책을 수립함

* 세션 ID의 관리 방법
- 세션 ID는 안전한 서버에서 최소 '128비트의 길이' 로 생성
- 세션 ID의 예측이 불가능하도록 안전한 '난수 알고리즘' 을 적용
- 세션 ID가 노출되지 않도록 URL Rewrite 기능을 사용하지 않는 방향으로 설계
  -- URL Rewrite : 쿠키를 사용할 수 없는 환경에서 세선 ID 전달을 위해 URL에 세션 ID를 포함시키는 것
- 로그인 시 로그인 전의 세션 ID를 삭제하고 재할당
- 장기간 접속하고 있는 세션 ID는 주기적으로 지할당되도록 설계함


# 03. 입력 데이터 검증 및 표현

* 입력 데이터 검증 및 표현
- 입력 데이터로 인해 발생하는 문제들을 예방하기 위해 구현 단계에서 검증해야 하는 보안 점검 항목들

** 입력 데이터 검증 및 표현의 보안 약점
1) SQL 삽입 (Injection)
- 웹 응용 프로그램에 'SQL'을 삽입하여 내부 데이터베이스(DB) 서버의 데이터를 유출 및 변조하고, 관리자 인증을 우회하는 보안 약점
- '동적 쿼리' 에 사용되는 입력 데이터에 '예약어' 및 '특수문자' 가 입력되지 않게 필터링 되도록 설정하여 방지할 수 있음

2) 경로 조작 및 자원 삽입
- 데이터 입출력 경로를 조작하여 서버 자원을 수정, 삭제할 수 있는 보안 약점
- 사용자 입력값을 식별자로 사용하는 경우, '경로 순회 공격'을 막는 필터를 사용하여 방지할 수 있음

3) 크로스사이트 스크립팅 (XSS)
- 웹 페이지에 악의적인 '스크립트' 를 삽입하여 방문자들의 정보를 탈취하거나, 비정상적인 기능 수행을 유발하는 보안 약점
- 'HTML 태그' 의 사용을 제한하거나 스크립트에 삽입되지 않도록 <,>,& 등의 문자를 다른 문자로 치환함으로써 방지할 수 있음

4) 운영체제 명령어 삽입
- 외부 입력값을 통해 시스템 명령어의 실행을 유도함으로써 권한을 탈취하거나 시스템 장애를 유발하는 보안 약점
- 웹 인터페이스를 통해 시스템 명령어가 전달되지 않도록 하고, 외부 입력값을 검증 없이 내부 명령어로 사용하지 않음으로써 방지할 수 있음

5) 위험한 형식 파일 업로드
- 악의적인 명령어가 포함된 스크립트 파일을 업로드함으로써 시스템에 손상을 주거나, 시스템을 제어할 수 있는 보안 약점
- 업로드 되는 파일의 확장자 제한, 파일명의 암호화, 웹사이트와 파일 서버의 경로 분리, 실행 속성을 제거하는 등의 방법으로 방지할 수 있음

6) 신뢰되지 않는 URL 주소로 자동접속 연결
- 입력 값으로 사이트 주소를 받는 경우, 이를 조작하여 방문자를 피싱 사이트로 유도하는 보안 약점
- 연결되는 외부 사이트의 주소를 화이트 리스트로 관리함으로써 방지할 수 있음

7) 메모리 버퍼 오버플로
- 연속된 메모리 공간을 사용하는 프로그램에서 할당된 메모리의 범위를 넘어선 위치에서 자료를 읽거나 쓰려고 할 때 발생하는 보안 취약점
- 메모리 버퍼를 사용할 경우 적절한 버퍼의 크기를 설정하고, 설정된 범위의 메모리 내에서 올바르게 읽거나 쓸 수 있도록 함으로써 방지할 수 있음






































































































































































